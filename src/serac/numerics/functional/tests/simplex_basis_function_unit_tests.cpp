// Copyright (c) 2019-2024, Lawrence Livermore National Security, LLC and
// other Serac Project Developers. See the top-level LICENSE file for
// details.
//
// SPDX-License-Identifier: (BSD-3-Clause)#include <gtest/gtest.h>

#include "mfem.hpp"
#include <gtest/gtest.h>

#include "axom/slic/core/SimpleLogger.hpp"

#include "serac/numerics/functional/detail/metaprogramming.hpp"
#include "serac/numerics/functional/tensor.hpp"
#include "serac/numerics/functional/finite_element.hpp"

using namespace serac;

template <typename element_type>
auto lagrange_nodes()
{
  if constexpr (element_type::geometry == mfem::Geometry::TRIANGLE && element_type::n == 2) {
    return std::vector<tensor<double, 2> >{{0, 0}, {1, 0}, {0, 1}};
  }

  if constexpr (element_type::geometry == mfem::Geometry::TRIANGLE && element_type::n == 3) {
    return std::vector<tensor<double, 2> >{{0, 0}, {0.5, 0}, {1, 0}, {0, 0.5}, {0.5, 0.5}, {0, 1}};
  }

  if constexpr (element_type::geometry == mfem::Geometry::TRIANGLE && element_type::n == 4) {
    return std::vector<tensor<double, 2> >{{0, 0},
                                           {0.2763932022500210303590826, 0},
                                           {0.7236067977499789696409174, 0},
                                           {1., 0},
                                           {0, 0.2763932022500210303590826},
                                           {0.3333333333333333333333333, 0.3333333333333333333333333},
                                           {0.7236067977499789696409174, 0.2763932022500210303590826},
                                           {0, 0.7236067977499789696409174},
                                           {0.2763932022500210303590826, 0.7236067977499789696409174},
                                           {0, 1.}};
  }

  if constexpr (element_type::geometry == mfem::Geometry::TETRAHEDRON && element_type::n == 2) {
    return std::vector<tensor<double, 3> >{{0, 0, 0}, {1., 0, 0}, {0, 1., 0}, {0, 0, 1.}};
  }

  if constexpr (element_type::geometry == mfem::Geometry::TETRAHEDRON && element_type::n == 3) {
    return std::vector<tensor<double, 3> >{{0, 0, 0},  {0.5, 0, 0}, {1., 0, 0},    {0, 0.5, 0},   {0.5, 0.5, 0},
                                           {0, 1., 0}, {0, 0, 0.5}, {0.5, 0, 0.5}, {0, 0.5, 0.5}, {0, 0, 1.}};
  }

  if constexpr (element_type::geometry == mfem::Geometry::TETRAHEDRON && element_type::n == 4) {
    return std::vector<tensor<double, 3> >{
        {0, 0, 0},
        {0.2763932022500210303590826, 0, 0},
        {0.7236067977499789696409174, 0, 0},
        {1., 0, 0},
        {0, 0.2763932022500210303590826, 0},
        {0.3333333333333333333333333, 0.3333333333333333333333333, 0},
        {0.7236067977499789696409174, 0.2763932022500210303590826, 0},
        {0, 0.7236067977499789696409174, 0},
        {0.2763932022500210303590826, 0.7236067977499789696409174, 0},
        {0, 1., 0},
        {0, 0, 0.2763932022500210303590826},
        {0.3333333333333333333333333, 0, 0.3333333333333333333333333},
        {0.7236067977499789696409174, 0, 0.2763932022500210303590826},
        {0, 0.3333333333333333333333333, 0.3333333333333333333333333},
        {0.3333333333333333333333333, 0.3333333333333333333333333, 0.3333333333333333333333333},
        {0, 0.7236067977499789696409174, 0.2763932022500210303590826},
        {0, 0, 0.7236067977499789696409174},
        {0.2763932022500210303590826, 0, 0.7236067977499789696409174},
        {0, 0.2763932022500210303590826, 0.7236067977499789696409174},
        {0, 0, 1.}};
  }
}

template <typename element_type>
void verify_kronecker_delta_property(double tolerance)
{
  auto nodes = lagrange_nodes<element_type>();
  auto I = DenseIdentity<element_type::ndof>();

  for (int i = 0; i < element_type::ndof; i++) {
    double error = norm(I[i] - element_type::shape_functions(nodes[uint32_t(i)]));
    EXPECT_NEAR(error, 0.0, tolerance);
  }
}

TEST(LinearTriangle, KroneckerDeltaProperty)
{
  verify_kronecker_delta_property<finite_element<mfem::Geometry::TRIANGLE, H1<1> > >(1.0e-16);
}

TEST(QuadraticTriangle, KroneckerDeltaProperty)
{
  verify_kronecker_delta_property<finite_element<mfem::Geometry::TRIANGLE, H1<2> > >(1.0e-16);
}

TEST(CubicTriangle, KroneckerDeltaProperty)
{
  verify_kronecker_delta_property<finite_element<mfem::Geometry::TRIANGLE, H1<3> > >(5.0e-16);
}

TEST(LinearTetrahedron, KroneckerDeltaProperty)
{
  verify_kronecker_delta_property<finite_element<mfem::Geometry::TETRAHEDRON, H1<1> > >(1.0e-16);
}

TEST(QuadraticTetrahedron, KroneckerDeltaProperty)
{
  verify_kronecker_delta_property<finite_element<mfem::Geometry::TETRAHEDRON, H1<2> > >(1.0e-16);
}

TEST(CubicTetrahedron, KroneckerDeltaProperty)
{
  verify_kronecker_delta_property<finite_element<mfem::Geometry::TETRAHEDRON, H1<3> > >(7.0e-16);
}

template <typename element_type>
void verify_basis_function_gradients(double tolerance)
{
  constexpr double eps = 1.0e-7;
  constexpr int dim = element_type::dim;
  using vec = tensor<double, dim>;

  std::vector<vec> random_points;
  if constexpr (dim == 2) {
    random_points = {{0.035186, 0.850529}, {0.261589, 0.496929}, {0.0593282, 0.618562}, {0.488774, 0.0887839},
                     {0.259885, 0.482077}, {0.592555, 0.293245}, {0.228267, 0.123783},  {0.459186, 0.182878},
                     {0.299645, 0.35773},  {0.160527, 0.54005}};
  }
  if constexpr (dim == 3) {
    random_points = {{0.142305, 0.293363, 0.375573},  {0.380177, 0.476144, 0.0925416},  {0.0959899, 0.223993, 0.551841},
                     {0.0984588, 0.376485, 0.444559}, {0.385216, 0.132315, 0.0977731},  {0.134371, 0.472076, 0.129275},
                     {0.268994, 0.179671, 0.140298},  {0.0543239, 0.532272, 0.0826736}, {0.284743, 0.446908, 0.059974},
                     {0.542072, 0.247396, 0.0856298}};
  }

  auto I = DenseIdentity<dim>();

  auto phi = element_type::shape_function;
  auto dphi_dxi = element_type::shape_function_gradient;

  double max_error = 0;
  for (auto point : random_points) {
    for (int i = 0; i < element_type::ndof; i++) {
      auto grad = dphi_dxi(point, i);
      for (int j = 0; j < dim; j++) {
        double fd = (phi(point + eps * I[j], i) - phi(point - eps * I[j], i)) / (2 * eps);
        max_error = std::max(max_error, std::abs(grad[j] - fd));
      }
    }
  }
  EXPECT_NEAR(max_error, 0.0, tolerance);
}

TEST(LinearTriangle, Gradients)
{
  verify_basis_function_gradients<finite_element<mfem::Geometry::TRIANGLE, H1<1> > >(1.0e-9);
}

TEST(QuadraticTriangle, Gradients)
{
  verify_basis_function_gradients<finite_element<mfem::Geometry::TRIANGLE, H1<2> > >(2.0e-9);
}

TEST(CubicTriangle, Gradients)
{
  verify_basis_function_gradients<finite_element<mfem::Geometry::TRIANGLE, H1<3> > >(3.0e-9);
}

TEST(LinearTetrahedron, Gradients)
{
  verify_basis_function_gradients<finite_element<mfem::Geometry::TETRAHEDRON, H1<1> > >(1.0e-9);
}

TEST(QuadraticTetrahedron, Gradients)
{
  verify_basis_function_gradients<finite_element<mfem::Geometry::TETRAHEDRON, H1<2> > >(2.0e-9);
}

TEST(CubicTetrahedron, Gradients)
{
  verify_basis_function_gradients<finite_element<mfem::Geometry::TETRAHEDRON, H1<3> > >(3.0e-9);
}

template <typename element_type>
auto exact_mass_matrix()
{
  if constexpr (element_type::geometry == mfem::Geometry::TRIANGLE && element_type::n == 2) {
    return tensor<double, 3, 3>{{{0.083333333333333333333, 0.041666666666666666667, 0.041666666666666666667},
                                 {0.041666666666666666667, 0.083333333333333333333, 0.041666666666666666667},
                                 {0.041666666666666666667, 0.041666666666666666667, 0.083333333333333333333}}};
  }

  if constexpr (element_type::geometry == mfem::Geometry::TRIANGLE && element_type::n == 3) {
    return tensor<double, 6, 6>{
        {{0.016666666666666666667, 0, -0.0027777777777777777778, 0, -0.011111111111111111111,
          -0.0027777777777777777778},
         {0, 0.088888888888888888889, 0, 0.044444444444444444444, 0.044444444444444444444, -0.011111111111111111111},
         {-0.0027777777777777777778, 0, 0.016666666666666666667, -0.011111111111111111111, 0,
          -0.0027777777777777777778},
         {0, 0.044444444444444444444, -0.011111111111111111111, 0.088888888888888888889, 0.044444444444444444444, 0},
         {-0.011111111111111111111, 0.044444444444444444444, 0, 0.044444444444444444444, 0.088888888888888888889, 0},
         {-0.0027777777777777777778, -0.011111111111111111111, -0.0027777777777777777778, 0, 0,
          0.016666666666666666667}}};
  }

  if constexpr (element_type::geometry == mfem::Geometry::TRIANGLE && element_type::n == 4) {
    return tensor<double, 10, 10>{
        {{0.0057539682539682539683, -0.0021012241951883877462, 0.00011709721106140361925, 0.00029761904761904761905,
          -0.0021012241951883877462, 0, 0.0029761904761904761905, 0.00011709721106140361925, 0.0029761904761904761905,
          0.00029761904761904761905},
         {-0.0021012241951883877462, 0.034722222222222222222, -0.0024801587301587301587, 0.00011709721106140361925,
          0.016051924491566417145, 0.013392857142857142857, -0.0074404761904761904762, -0.0074404761904761904762,
          -0.0061312895709314965100, 0.0029761904761904761905},
         {0.00011709721106140361925, -0.0024801587301587301587, 0.034722222222222222222, -0.0021012241951883877462,
          -0.0074404761904761904762, 0.013392857142857142857, 0.016051924491566417145, -0.0061312895709314965100,
          -0.0074404761904761904762, 0.0029761904761904761905},
         {0.00029761904761904761905, 0.00011709721106140361925, -0.0021012241951883877462, 0.0057539682539682539683,
          0.0029761904761904761905, 0, -0.0021012241951883877462, 0.0029761904761904761905, 0.00011709721106140361925,
          0.00029761904761904761905},
         {-0.0021012241951883877462, 0.016051924491566417145, -0.0074404761904761904762, 0.0029761904761904761905,
          0.034722222222222222222, 0.013392857142857142857, -0.0061312895709314965100, -0.0024801587301587301587,
          -0.0074404761904761904762, 0.00011709721106140361925},
         {0, 0.013392857142857142857, 0.013392857142857142857, 0, 0.013392857142857142857, 0.14464285714285714286,
          0.013392857142857142857, 0.013392857142857142857, 0.013392857142857142857, 0},
         {0.0029761904761904761905, -0.0074404761904761904762, 0.016051924491566417145, -0.0021012241951883877462,
          -0.0061312895709314965100, 0.013392857142857142857, 0.034722222222222222222, -0.0074404761904761904762,
          -0.0024801587301587301587, 0.00011709721106140361925},
         {0.00011709721106140361925, -0.0074404761904761904762, -0.0061312895709314965100, 0.0029761904761904761905,
          -0.0024801587301587301587, 0.013392857142857142857, -0.0074404761904761904762, 0.034722222222222222222,
          0.016051924491566417145, -0.0021012241951883877462},
         {0.0029761904761904761905, -0.0061312895709314965100, -0.0074404761904761904762, 0.00011709721106140361925,
          -0.0074404761904761904762, 0.013392857142857142857, -0.0024801587301587301587, 0.016051924491566417145,
          0.034722222222222222222, -0.0021012241951883877462},
         {0.00029761904761904761905, 0.0029761904761904761905, 0.0029761904761904761905, 0.00029761904761904761905,
          0.00011709721106140361925, 0, 0.00011709721106140361925, -0.0021012241951883877462, -0.0021012241951883877462,
          0.0057539682539682539683}}};
  }

  if constexpr (element_type::geometry == mfem::Geometry::TETRAHEDRON && element_type::n == 2) {
    return tensor<double, 4, 4>{
        {{0.016666666666666666667, 0.0083333333333333333333, 0.0083333333333333333333, 0.0083333333333333333333},
         {0.0083333333333333333333, 0.016666666666666666667, 0.0083333333333333333333, 0.0083333333333333333333},
         {0.0083333333333333333333, 0.0083333333333333333333, 0.016666666666666666667, 0.0083333333333333333333},
         {0.0083333333333333333333, 0.0083333333333333333333, 0.0083333333333333333333, 0.016666666666666666667}}};
  }

  if constexpr (element_type::geometry == mfem::Geometry::TETRAHEDRON && element_type::n == 3) {
    return tensor<double, 10, 10>{
        {{0.0023809523809523809524, -0.0015873015873015873016, 0.00039682539682539682540, -0.0015873015873015873016,
          -0.0023809523809523809524, 0.00039682539682539682540, -0.0015873015873015873016, -0.0023809523809523809524,
          -0.0023809523809523809524, 0.00039682539682539682540},
         {-0.0015873015873015873016, 0.012698412698412698413, -0.0015873015873015873016, 0.0063492063492063492063,
          0.0063492063492063492063, -0.0023809523809523809524, 0.0063492063492063492063, 0.0063492063492063492063,
          0.0031746031746031746032, -0.0023809523809523809524},
         {0.00039682539682539682540, -0.0015873015873015873016, 0.0023809523809523809524, -0.0023809523809523809524,
          -0.0015873015873015873016, 0.00039682539682539682540, -0.0023809523809523809524, -0.0015873015873015873016,
          -0.0023809523809523809524, 0.00039682539682539682540},
         {-0.0015873015873015873016, 0.0063492063492063492063, -0.0023809523809523809524, 0.012698412698412698413,
          0.0063492063492063492063, -0.0015873015873015873016, 0.0063492063492063492063, 0.0031746031746031746032,
          0.0063492063492063492063, -0.0023809523809523809524},
         {-0.0023809523809523809524, 0.0063492063492063492063, -0.0015873015873015873016, 0.0063492063492063492063,
          0.012698412698412698413, -0.0015873015873015873016, 0.0031746031746031746032, 0.0063492063492063492063,
          0.0063492063492063492063, -0.0023809523809523809524},
         {0.00039682539682539682540, -0.0023809523809523809524, 0.00039682539682539682540, -0.0015873015873015873016,
          -0.0015873015873015873016, 0.0023809523809523809524, -0.0023809523809523809524, -0.0023809523809523809524,
          -0.0015873015873015873016, 0.00039682539682539682540},
         {-0.0015873015873015873016, 0.0063492063492063492063, -0.0023809523809523809524, 0.0063492063492063492063,
          0.0031746031746031746032, -0.0023809523809523809524, 0.012698412698412698413, 0.0063492063492063492063,
          0.0063492063492063492063, -0.0015873015873015873016},
         {-0.0023809523809523809524, 0.0063492063492063492063, -0.0015873015873015873016, 0.0031746031746031746032,
          0.0063492063492063492063, -0.0023809523809523809524, 0.0063492063492063492063, 0.012698412698412698413,
          0.0063492063492063492063, -0.0015873015873015873016},
         {-0.0023809523809523809524, 0.0031746031746031746032, -0.0023809523809523809524, 0.0063492063492063492063,
          0.0063492063492063492063, -0.0015873015873015873016, 0.0063492063492063492063, 0.0063492063492063492063,
          0.012698412698412698413, -0.0015873015873015873016},
         {0.00039682539682539682540, -0.0023809523809523809524, 0.00039682539682539682540, -0.0023809523809523809524,
          -0.0023809523809523809524, 0.00039682539682539682540, -0.0015873015873015873016, -0.0015873015873015873016,
          -0.0015873015873015873016, 0.0023809523809523809524}}};
  }

  if constexpr (element_type::geometry == mfem::Geometry::TETRAHEDRON && element_type::n == 4) {
    return tensor<double, 20, 20>{
        {{0.00082671957671957671958,  -0.00081312218388305259092, 0.00023441848017934888722,
          0.000022045855379188712522, -0.00081312218388305259092, 0.00074404761904761904762,
          0.00016534391534391534392,  0.00023441848017934888722,  0.00016534391534391534392,
          0.000022045855379188712522, -0.00081312218388305259092, 0.00074404761904761904762,
          0.00016534391534391534392,  0.00074404761904761904762,  0.0017857142857142857143,
          0.00016534391534391534392,  0.00023441848017934888722,  0.00016534391534391534392,
          0.00016534391534391534392,  0.000022045855379188712522},
         {-0.00081312218388305259092,
          0.0033068783068783068783,
          -0.00082671957671957671958,
          0.00023441848017934888722,
          0.0016132335665370603353,
          0,
          -0.00068893298059964726631,
          -0.00068893298059964726631,
          -0.00023536760533776580264,
          0.00016534391534391534392,
          0.0016132335665370603353,
          0,
          -0.00068893298059964726631,
          -0.00028420090122775680937,
          -0.0019479419559151003335,
          0,
          -0.00068893298059964726631,
          -0.00023536760533776580264,
          0,
          0.00016534391534391534392},
         {0.00023441848017934888722,
          -0.00082671957671957671958,
          0.0033068783068783068783,
          -0.00081312218388305259092,
          -0.00068893298059964726631,
          0,
          0.0016132335665370603353,
          -0.00023536760533776580264,
          -0.00068893298059964726631,
          0.00016534391534391534392,
          -0.00068893298059964726631,
          0,
          0.0016132335665370603353,
          -0.0019479419559151003335,
          -0.00028420090122775680937,
          0,
          -0.00023536760533776580264,
          -0.00068893298059964726631,
          0,
          0.00016534391534391534392},
         {0.000022045855379188712522, 0.00023441848017934888722, -0.00081312218388305259092,
          0.00082671957671957671958,  0.00016534391534391534392, 0.00074404761904761904762,
          -0.00081312218388305259092, 0.00016534391534391534392, 0.00023441848017934888722,
          0.000022045855379188712522, 0.00016534391534391534392, 0.00074404761904761904762,
          -0.00081312218388305259092, 0.0017857142857142857143,  0.00074404761904761904762,
          0.00016534391534391534392,  0.00016534391534391534392, 0.00023441848017934888722,
          0.00016534391534391534392,  0.000022045855379188712522},
         {-0.00081312218388305259092,
          0.0016132335665370603353,
          -0.00068893298059964726631,
          0.00016534391534391534392,
          0.0033068783068783068783,
          0,
          -0.00023536760533776580264,
          -0.00082671957671957671958,
          -0.00068893298059964726631,
          0.00023441848017934888722,
          0.0016132335665370603353,
          -0.00028420090122775680937,
          0,
          0,
          -0.0019479419559151003335,
          -0.00068893298059964726631,
          -0.00068893298059964726631,
          0,
          -0.00023536760533776580264,
          0.00016534391534391534392},
         {0.00074404761904761904762,
          0,
          0,
          0.00074404761904761904762,
          0,
          0.016071428571428571429,
          0,
          0,
          0,
          0.00074404761904761904762,
          -0.00028420090122775680937,
          0.0080357142857142857143,
          -0.00028420090122775680937,
          0.0080357142857142857143,
          0.0080357142857142857143,
          -0.00028420090122775680937,
          -0.0019479419559151003335,
          -0.0019479419559151003335,
          -0.0019479419559151003335,
          0.0017857142857142857143},
         {0.00016534391534391534392,
          -0.00068893298059964726631,
          0.0016132335665370603353,
          -0.00081312218388305259092,
          -0.00023536760533776580264,
          0,
          0.0033068783068783068783,
          -0.00068893298059964726631,
          -0.00082671957671957671958,
          0.00023441848017934888722,
          0,
          -0.00028420090122775680937,
          0.0016132335665370603353,
          -0.0019479419559151003335,
          0,
          -0.00068893298059964726631,
          0,
          -0.00068893298059964726631,
          -0.00023536760533776580264,
          0.00016534391534391534392},
         {0.00023441848017934888722,
          -0.00068893298059964726631,
          -0.00023536760533776580264,
          0.00016534391534391534392,
          -0.00082671957671957671958,
          0,
          -0.00068893298059964726631,
          0.0033068783068783068783,
          0.0016132335665370603353,
          -0.00081312218388305259092,
          -0.00068893298059964726631,
          -0.0019479419559151003335,
          0,
          0,
          -0.00028420090122775680937,
          0.0016132335665370603353,
          -0.00023536760533776580264,
          0,
          -0.00068893298059964726631,
          0.00016534391534391534392},
         {0.00016534391534391534392,
          -0.00023536760533776580264,
          -0.00068893298059964726631,
          0.00023441848017934888722,
          -0.00068893298059964726631,
          0,
          -0.00082671957671957671958,
          0.0016132335665370603353,
          0.0033068783068783068783,
          -0.00081312218388305259092,
          0,
          -0.0019479419559151003335,
          -0.00068893298059964726631,
          -0.00028420090122775680937,
          0,
          0.0016132335665370603353,
          0,
          -0.00023536760533776580264,
          -0.00068893298059964726631,
          0.00016534391534391534392},
         {0.000022045855379188712522, 0.00016534391534391534392, 0.00016534391534391534392, 0.000022045855379188712522,
          0.00023441848017934888722,  0.00074404761904761904762, 0.00023441848017934888722, -0.00081312218388305259092,
          -0.00081312218388305259092, 0.00082671957671957671958, 0.00016534391534391534392, 0.0017857142857142857143,
          0.00016534391534391534392,  0.00074404761904761904762, 0.00074404761904761904762, -0.00081312218388305259092,
          0.00016534391534391534392,  0.00016534391534391534392, 0.00023441848017934888722, 0.000022045855379188712522},
         {-0.00081312218388305259092,
          0.0016132335665370603353,
          -0.00068893298059964726631,
          0.00016534391534391534392,
          0.0016132335665370603353,
          -0.00028420090122775680937,
          0,
          -0.00068893298059964726631,
          0,
          0.00016534391534391534392,
          0.0033068783068783068783,
          0,
          -0.00023536760533776580264,
          0,
          -0.0019479419559151003335,
          -0.00023536760533776580264,
          -0.00082671957671957671958,
          -0.00068893298059964726631,
          -0.00068893298059964726631,
          0.00023441848017934888722},
         {0.00074404761904761904762,
          0,
          0,
          0.00074404761904761904762,
          -0.00028420090122775680937,
          0.0080357142857142857143,
          -0.00028420090122775680937,
          -0.0019479419559151003335,
          -0.0019479419559151003335,
          0.0017857142857142857143,
          0,
          0.016071428571428571429,
          0,
          0.0080357142857142857143,
          0.0080357142857142857143,
          -0.0019479419559151003335,
          0,
          0,
          -0.00028420090122775680937,
          0.00074404761904761904762},
         {0.00016534391534391534392,
          -0.00068893298059964726631,
          0.0016132335665370603353,
          -0.00081312218388305259092,
          0,
          -0.00028420090122775680937,
          0.0016132335665370603353,
          0,
          -0.00068893298059964726631,
          0.00016534391534391534392,
          -0.00023536760533776580264,
          0,
          0.0033068783068783068783,
          -0.0019479419559151003335,
          0,
          -0.00023536760533776580264,
          -0.00068893298059964726631,
          -0.00082671957671957671958,
          -0.00068893298059964726631,
          0.00023441848017934888722},
         {0.00074404761904761904762,
          -0.00028420090122775680937,
          -0.0019479419559151003335,
          0.0017857142857142857143,
          0,
          0.0080357142857142857143,
          -0.0019479419559151003335,
          0,
          -0.00028420090122775680937,
          0.00074404761904761904762,
          0,
          0.0080357142857142857143,
          -0.0019479419559151003335,
          0.016071428571428571429,
          0.0080357142857142857143,
          0,
          0,
          -0.00028420090122775680937,
          0,
          0.00074404761904761904762},
         {0.0017857142857142857143,
          -0.0019479419559151003335,
          -0.00028420090122775680937,
          0.00074404761904761904762,
          -0.0019479419559151003335,
          0.0080357142857142857143,
          0,
          -0.00028420090122775680937,
          0,
          0.00074404761904761904762,
          -0.0019479419559151003335,
          0.0080357142857142857143,
          0,
          0.0080357142857142857143,
          0.016071428571428571429,
          0,
          -0.00028420090122775680937,
          0,
          0,
          0.00074404761904761904762},
         {0.00016534391534391534392,
          0,
          0,
          0.00016534391534391534392,
          -0.00068893298059964726631,
          -0.00028420090122775680937,
          -0.00068893298059964726631,
          0.0016132335665370603353,
          0.0016132335665370603353,
          -0.00081312218388305259092,
          -0.00023536760533776580264,
          -0.0019479419559151003335,
          -0.00023536760533776580264,
          0,
          0,
          0.0033068783068783068783,
          -0.00068893298059964726631,
          -0.00068893298059964726631,
          -0.00082671957671957671958,
          0.00023441848017934888722},
         {0.00023441848017934888722,
          -0.00068893298059964726631,
          -0.00023536760533776580264,
          0.00016534391534391534392,
          -0.00068893298059964726631,
          -0.0019479419559151003335,
          0,
          -0.00023536760533776580264,
          0,
          0.00016534391534391534392,
          -0.00082671957671957671958,
          0,
          -0.00068893298059964726631,
          0,
          -0.00028420090122775680937,
          -0.00068893298059964726631,
          0.0033068783068783068783,
          0.0016132335665370603353,
          0.0016132335665370603353,
          -0.00081312218388305259092},
         {0.00016534391534391534392,
          -0.00023536760533776580264,
          -0.00068893298059964726631,
          0.00023441848017934888722,
          0,
          -0.0019479419559151003335,
          -0.00068893298059964726631,
          0,
          -0.00023536760533776580264,
          0.00016534391534391534392,
          -0.00068893298059964726631,
          0,
          -0.00082671957671957671958,
          -0.00028420090122775680937,
          0,
          -0.00068893298059964726631,
          0.0016132335665370603353,
          0.0033068783068783068783,
          0.0016132335665370603353,
          -0.00081312218388305259092},
         {0.00016534391534391534392,
          0,
          0,
          0.00016534391534391534392,
          -0.00023536760533776580264,
          -0.0019479419559151003335,
          -0.00023536760533776580264,
          -0.00068893298059964726631,
          -0.00068893298059964726631,
          0.00023441848017934888722,
          -0.00068893298059964726631,
          -0.00028420090122775680937,
          -0.00068893298059964726631,
          0,
          0,
          -0.00082671957671957671958,
          0.0016132335665370603353,
          0.0016132335665370603353,
          0.0033068783068783068783,
          -0.00081312218388305259092},
         {0.000022045855379188712522, 0.00016534391534391534392,  0.00016534391534391534392,
          0.000022045855379188712522, 0.00016534391534391534392,  0.0017857142857142857143,
          0.00016534391534391534392,  0.00016534391534391534392,  0.00016534391534391534392,
          0.000022045855379188712522, 0.00023441848017934888722,  0.00074404761904761904762,
          0.00023441848017934888722,  0.00074404761904761904762,  0.00074404761904761904762,
          0.00023441848017934888722,  -0.00081312218388305259092, -0.00081312218388305259092,
          -0.00081312218388305259092, 0.00082671957671957671958}}};
  }
}

template <typename element_type, int q>
void verify_mass_matrix_integration(double tolerance)
{
  auto phi = element_type::shape_function;

  constexpr int num_dofs = element_type::ndof;
  constexpr auto points = GaussLegendreNodes<q, element_type::geometry>();
  constexpr auto weights = GaussLegendreWeights<q, element_type::geometry>();
  constexpr int num_quadrature_points = leading_dimension(points);

  tensor<double, element_type::ndof, element_type::ndof> M{};
  for (int i = 0; i < num_quadrature_points; i++) {
    auto xi = points[i];
    auto dx = weights[i];
    for (int r = 0; r < num_dofs; r++) {
      for (int c = 0; c < num_dofs; c++) {
        M(r, c) += phi(xi, r) * phi(xi, c) * dx;
      }
    }
  }

  auto Mexact = exact_mass_matrix<element_type>();

  EXPECT_NEAR(norm(Mexact - M) / norm(Mexact), 0.0, tolerance);
}

TEST(LinearTriangle, mass_integration)
{
  verify_mass_matrix_integration<finite_element<mfem::Geometry::TRIANGLE, H1<1> >, 2>(3.0e-15);
}

TEST(QuadraticTriangle, mass_integration)
{
  verify_mass_matrix_integration<finite_element<mfem::Geometry::TRIANGLE, H1<2> >, 3>(2.5e-14);
}

TEST(CubicTriangle, mass_integration_inexact)
{
  verify_mass_matrix_integration<finite_element<mfem::Geometry::TRIANGLE, H1<3> >, 4>(0.01);
}

TEST(CubicTriangle, mass_integration_exact)
{
  verify_mass_matrix_integration<finite_element<mfem::Geometry::TRIANGLE, H1<3> >, 5>(6.0e-15);
}

TEST(LinearTetrahedron, mass_integration)
{
  verify_mass_matrix_integration<finite_element<mfem::Geometry::TETRAHEDRON, H1<1> >, 2>(3.0e-15);
}

TEST(QuadraticTetrahedron, mass_integration_inexact)
{
  verify_mass_matrix_integration<finite_element<mfem::Geometry::TETRAHEDRON, H1<2> >, 3>(0.01);
}

TEST(QuadraticTetrahedron, mass_integration_exact)
{
  verify_mass_matrix_integration<finite_element<mfem::Geometry::TETRAHEDRON, H1<2> >, 4>(4.0e-15);
}

TEST(CubicTetrahedron, mass_integration_inexact)
{
  using element_type = finite_element<mfem::Geometry::TETRAHEDRON, H1<3> >;
  verify_mass_matrix_integration<element_type, 4>(0.02);
}

TEST(CubicTetrahedron, mass_integration_exact)
{
  using element_type = finite_element<mfem::Geometry::TETRAHEDRON, H1<3> >;
  verify_mass_matrix_integration<element_type, 5>(2.0e-15);
}

int main(int argc, char* argv[])
{
  ::testing::InitGoogleTest(&argc, argv);

  axom::slic::SimpleLogger logger;

  return RUN_ALL_TESTS();
}
