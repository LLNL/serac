# Copyright (c) 2019-2024, Lawrence Livermore National Security, LLC and
# other Serac Project Developers. See the top-level LICENSE file for
# details.
#
# SPDX-License-Identifier: (BSD-3-Clause)

set(functional_test_depends gtest serac_functional ${functional_depends})
blt_list_append(TO functional_depends ELEMENTS blt::cuda IF ENABLE_CUDA)

# This test is all constexpr-evaluated, so it doesn't
# actually need to run, if it compiles without error, the tests have passed
blt_add_executable(NAME        tensor_unit_tests
                   SOURCES     tensor_unit_tests.cpp
                   OUTPUT_DIR  ${TEST_OUTPUT_DIRECTORY}
                   DEPENDS_ON  ${functional_test_depends}
                   FOLDER      serac/tests)

# Then add the examples/tests
set(functional_serial_test_sources
    functional_shape_derivatives.cpp
    simplex_basis_function_unit_tests.cpp
    bug_boundary_qoi.cpp
    domain_tests.cpp
    geometric_factors_tests.cpp
    hcurl_unit_tests.cpp
    functional_tet_quality.cpp
    test_tensor_ad.cpp
    tuple_arithmetic_unit_tests.cpp
    test_newton.cpp)

serac_add_tests(SOURCES    ${functional_serial_test_sources}
                DEPENDS_ON ${functional_test_depends})

set_source_files_properties(functional_tet_quality PROPERTIES LANGUAGE CXX)

# Then add the examples/tests
set(functional_parallel_test_sources
    #functional_basic_hcurl.cpp
    functional_with_domain.cpp
    functional_basic_h1_scalar.cpp
    functional_basic_h1_vector.cpp
    functional_multiphysics.cpp
    functional_qoi.cpp
    functional_nonlinear.cpp
    functional_boundary_test.cpp
    functional_comparisons.cpp
    functional_comparison_L2.cpp
    )

serac_add_tests(SOURCES       ${functional_parallel_test_sources}
                DEPENDS_ON    ${functional_test_depends}
                NUM_MPI_TASKS 4 )

foreach(filename ${functional_parallel_test_sources})
    set_source_files_properties(${filename} PROPERTIES LANGUAGE CXX)
endforeach()

target_link_libraries(bug_boundary_qoi PUBLIC serac_physics)

if(SERAC_ENABLE_CUDA)

    set(functional_tests_cuda
    # functional_basic_hcurl.cpp
    # functional_with_domain.cpp
    functional_basic_h1_scalar.cpp
    # functional_basic_h1_vector.cpp
    # functional_multiphysics.cpp
    # functional_qoi.cpp
    # functional_nonlinear.cpp
    # functional_boundary_test.cpp
    functional_comparisons.cpp
    # functional_comparison_L2.cpp
    )

    serac_add_tests( SOURCES ${functional_tests_cuda}
                     USE_CUDA ON
                     DEPENDS_ON gtest serac_functional serac_state ${functional_depends} blt::cuda)

endif()
