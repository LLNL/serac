#
# Copyright (c) 2019-2023, Lawrence Livermore National Security, LLC and
# other Serac Project Developers. See the top-level COPYRIGHT file for details.
#
# SPDX-License-Identifier: (BSD-3-Clause)
#

variables:
  Clang_10_ImageName: 'seracllnl/tpls:clang-10_11-04-23_07h-20m'
  GCC_11_ImageName: 'seracllnl/tpls:gcc-11_11-04-23_07h-20m'

jobs:
- job: Build_and_Test
  strategy:
    matrix:
      linux_gcc11_debug:
          VM_ImageName: 'ubuntu-20.04'
          Compiler_ImageName: $(GCC_11_ImageName)
          TEST_TARGET: 'linux_gcc11'
          HOST_CONFIG: 'gcc@11.1.0.cmake'
          BUILD_TYPE: 'Debug'
      linux_gcc11_release:
          VM_ImageName: 'ubuntu-20.04'
          Compiler_ImageName: $(GCC_11_ImageName)
          TEST_TARGET: 'linux_gcc11'
          HOST_CONFIG: 'gcc@11.1.0.cmake'
          BUILD_TYPE: 'Release'
      linux_clang10_debug:
          VM_ImageName: 'ubuntu-20.04'
          Compiler_ImageName: $(Clang_10_ImageName)
          TEST_TARGET: 'linux_clang10'
          HOST_CONFIG: 'clang@10.0.0.cmake'
          BUILD_TYPE: 'Debug'
      linux_clang10_release:
          VM_ImageName: 'ubuntu-20.04'
          Compiler_ImageName: $(Clang_10_ImageName)
          TEST_TARGET: 'linux_clang10'
          HOST_CONFIG: 'clang@10.0.0.cmake'
          BUILD_TYPE: 'Release'
      linux_clang10_codevelop:
          VM_ImageName: 'ubuntu-20.04'
          Compiler_ImageName: $(Clang_10_ImageName)
          TEST_TARGET: 'linux_clang10'
          HOST_CONFIG: 'clang@10.0.0.cmake'
          BUILD_TYPE: 'Debug'
          CMAKE_OPTS: '-DSERAC_ENABLE_CODEVELOP=ON'
          BUILD_SRC_OPTS: '--skip-install'

  pool:
    vmImage: $(VM_ImageName)

  steps:
  - checkout: self
    clean: true
    submodules: recursive
  - script:  |
      echo " -e $TEST_TARGET -e HOST_CONFIG $(Compiler_ImageName) ./scripts/llnl/build_src.py $BUILD_SRC_OPTS -v --host-config $HOST_CONFIG --extra-cmake-options \"${CMAKE_OPTS} -DCMAKE_BUILD_TYPE=$BUILD_TYPE\""
      docker run --rm -v `pwd`:/home/serac/serac -e TEST_TARGET -e HOST_CONFIG $(Compiler_ImageName) ./serac/scripts/llnl/build_src.py $BUILD_SRC_OPTS -v --host-config $HOST_CONFIG --extra-cmake-options "${CMAKE_OPTS} -DCMAKE_BUILD_TYPE=$BUILD_TYPE"

    displayName: '$(TEST_TARGET) Build & Test'
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'cTest'
      testResultsFiles: '**/Test.xml'
      testRunTitle: '$(TEST_TARGET) Tests'
      failTaskOnFailedTests: true

- job: Check_Code
  variables:
    VM_ImageName: 'ubuntu-20.04'
    Compiler_ImageName: $(Clang_10_ImageName)
    TEST_TARGET: 'linux_clang10'
    HOST_CONFIG: 'clang@10.0.0.cmake'

  strategy:
    matrix:
      coverage:
        DO_COVERAGE_CHECK: 'yes'
        DO_DOCS_CHECK: 'no'
        DO_STYLE_CHECK: 'no'
        DO_HEADER_CHECK: 'no'
      docs:
        DO_COVERAGE_CHECK: 'no'
        DO_DOCS_CHECK: 'yes'
        DO_STYLE_CHECK: 'no'
        DO_HEADER_CHECK: 'no'
      style:
        DO_COVERAGE_CHECK: 'no'
        DO_DOCS_CHECK: 'no'
        DO_STYLE_CHECK: 'yes'
        DO_HEADER_CHECK: 'no'
      header:
        DO_COVERAGE_CHECK: 'no'
        DO_DOCS_CHECK: 'no'
        DO_STYLE_CHECK: 'no'
        DO_HEADER_CHECK: 'yes'

  pool:
    vmImage: $(VM_ImageName)

  steps:
  - checkout: self
    clean: true
    submodules: recursive
  # https://docs.codecov.io/docs/testing-with-docker
  - script:  |
      ci_env=`bash <(curl -s https://codecov.io/env)`
      echo "  -e DO_COVERAGE_CHECK  -e DO_DOCS_CHECK -e DO_STYLE_CHECK -e DO_HEADER_CHECK -e HOST_CONFIG ./serac/scripts/azure-pipelines/linux-check.sh"
      docker run --rm -v `pwd`:/home/serac/serac $ci_env -e DO_COVERAGE_CHECK  -e DO_DOCS_CHECK -e DO_STYLE_CHECK -e DO_HEADER_CHECK -e HOST_CONFIG $(Compiler_ImageName) ./serac/scripts/azure-pipelines/linux-check.sh
    displayName: '$(TEST_TARGET) Check'
