# Copyright (c) 2019-2021, Lawrence Livermore National Security, LLC and
# other Serac Project Developers. See the top-level COPYRIGHT file for details.
#
# SPDX-License-Identifier: (BSD-3-Clause)
#------------------------------------------------------------------------------

cmake_minimum_required(VERSION 3.8 FATAL_ERROR)

@PACKAGE_INIT@

if(NOT SERAC_FOUND)

  #----------------------------------------------------------------------------
  # Set version and paths
  #----------------------------------------------------------------------------
  
  set(SERAC_VERSION       "@SERAC_VERSION_FULL@")
  set(SERAC_VERSION_MAJOR "@SERAC_VERSION_MAJOR@")
  set(SERAC_VERSION_MINOR "@SERAC_VERSION_MINOR@")
  set(SERAC_VERSION_PATCH "@SERAC_VERSION_PATCH@")
  
  set(SERAC_INSTALL_PREFIX "@SERAC_INSTALL_PREFIX@")
  set(SERAC_INCLUDE_DIRS "${SERAC_INSTALL_PREFIX}/include")

  #----------------------------------------------------------------------------
  # Set user configuration options and features
  #----------------------------------------------------------------------------

  # SERAC external TPLs
  set(SERAC_USE_ASCENT         "@SERAC_USE_ASCENT@")
  set(SERAC_USE_AXOM           "@SERAC_USE_AXOM@")
  set(SERAC_USE_CONDUIT        "@SERAC_USE_CONDUIT@")
  set(SERAC_USE_FMT            "@SERAC_USE_FMT@")
  set(SERAC_USE_HDF5           "@SERAC_USE_HDF5@")
  set(SERAC_USE_MFEM           "@SERAC_USE_MFEM@")
  set(SERAC_USE_MPI            "@SERAC_USE_MPI@")
  set(SERAC_USE_TRIBOL         "@SERAC_USE_TRIBOL@")
  set(SERAC_USE_CALIPER        "@SERAC_USE_CALIPER@")
  set(SERAC_USE_PETSC          "@SERAC_USE_PETSC@")

  # SERAC "builtin" TPLs
  set(SERAC_ENABLE_CUDA "@ENABLE_CUDA@")

  #----------------------------------------------------------------------------
  # Bring in required  dependencies for this serac configuration
  #----------------------------------------------------------------------------
  include(CMakeFindDependencyMacro)

  # Ascent
  if(SERAC_USE_ASCENT)
    set(SERAC_ASCENT_DIR "@ASCENT_DIR@")
    if(NOT ASCENT_DIR) 
      set(ASCENT_DIR ${SERAC_ASCENT_DIR}) 
    endif()
    find_dependency(Ascent REQUIRED NO_DEFAULT_PATH PATHS "${ASCENT_DIR}/lib/cmake")
  endif()

  # Axom
  # also covers fmt
  if(SERAC_USE_AXOM)
    set(SERAC_AXOM_DIR "@AXOM_DIR@")
    if(NOT AXOM_DIR) 
      set(AXOM_DIR ${SERAC_AXOM_DIR}) 
    endif()
    find_dependency(Axom REQUIRED NO_DEFAULT_PATH PATHS "${AXOM_DIR}/lib/cmake")
  endif()

  # Conduit
  if(SERAC_USE_CONDUIT)
    set(SERAC_CONDUIT_DIR  "@CONDUIT_DIR@")
    if(NOT CONDUIT_DIR) 
      set(CONDUIT_DIR ${SERAC_CONDUIT_DIR}) 
    endif()
    find_dependency(Conduit REQUIRED NO_DEFAULT_PATH PATHS "${CONDUIT_DIR}/lib/cmake")
  endif()

  # HDF5
  if(SERAC_USE_HDF5)
    set(SERAC_HDF5_DIR     "@HDF5_DIR@")
    # Note: Targets not currently imported
  endif()

  # MFEM
  if(SERAC_USE_MFEM)
    set(SERAC_MFEM_DIR              "@MFEM_DIR@")
    set(SERAC_MFEM_INCLUDE_DIRS     "@MFEM_INCLUDE_DIRS@")
    set(SERAC_MFEM_LIBRARIES        "@MFEM_LIBRARIES@")
    set(SERAC_MFEM_BUILT_WITH_CMAKE @MFEM_BUILT_WITH_CMAKE@)
    if(NOT MFEM_INCLUDE_DIRS) 
      set(MFEM_INCLUDE_DIRS ${SERAC_MFEM_INCLUDE_DIRS}) 
    endif()
    if(NOT MFEM_LIBRARIES) 
      set(MFEM_LIBRARIES ${SERAC_MFEM_LIBRARIES}) 
    endif()
    # This will import the targets directly if they exist
    # Needed for dynamic MFEM library
    # TODO: Construct CMake target from GNU Make-build MFEM
    if(SERAC_MFEM_BUILT_WITH_CMAKE AND NOT MFEM_DIR)
      set(MFEM_DIR ${SERAC_MFEM_DIR})
      find_dependency(MFEM REQUIRED NO_DEFAULT_PATH PATHS "${MFEM_DIR}/lib/cmake/mfem")
    endif()
  endif()

  # Tribol
  if(SERAC_USE_TRIBOL)
    set(SERAC_TRIBOL_DIR   "@TRIBOL_DIR@")
    if(NOT TRIBOL_DIR) 
      set(TRIBOL_DIR ${SERAC_TRIBOL_DIR}) 
    endif()
    find_dependency(tribol REQUIRED NO_DEFAULT_PATH PATHS "${TRIBOL_DIR}/lib/cmake")
  endif()

  # Caliper
  if(SERAC_USE_CALIPER)
    set(SERAC_CALIPER_DIR     "@CALIPER_DIR@")
    if(NOT CALIPER_DIR) 
      set(CALIPER_DIR ${SERAC_CALIPER_DIR}) 
    endif()
    # See comment in SetupSeracThirdParty.cmake
    if(SERAC_ENABLE_CUDA)
      if(CMAKE_VERSION VERSION_LESS 3.17)
        message(FATAL_ERROR "Serac+Caliper+CUDA requires CMake > 3.17.")
      else()
        find_package(CUDAToolkit REQUIRED)
      endif() 
    endif()
    find_dependency(caliper REQUIRED NO_DEFAULT_PATH PATHS "${CALIPER_DIR}")
  endif()

  # Petsc
  if(SERAC_USE_PETSC)
    set(SERAC_PETSC_DIR     "@PETSC_DIR@")
    if(NOT PETSC_DIR)
      set(PETSC_DIR ${SERAC_PETSC_DIR})
    endif()
    # Note: Targets not currently imported
  endif()


  #----------------------------------------------------------------------------
  # Include targets exported by CMake
  #----------------------------------------------------------------------------
  get_filename_component(SERAC_CMAKE_CONFIG_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)
  include(${SERAC_CMAKE_CONFIG_DIR}/serac-targets.cmake)

  #----------------------------------------------------------------------------
  # Indicate that Serac is correctly set up
  #----------------------------------------------------------------------------
  set(SERAC_FOUND TRUE)

endif()
